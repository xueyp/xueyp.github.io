---
layout: post
title:  "读书笔记-用户体验要素"
categories: 读书笔记
tags: 读书笔记
author: xueyp
description:
---

## 用户体验为什么重要

用户体验并不是指一件产品本身是如何工作的，用户体验是指“产品如何与外界发生联系并发挥作用”，也就是人们如何“接触”和“使用”它。当人们询问你某个产品或服务时，他们问的是使用的体验。

- 它用起来难不难？
- 是不是很容易学会？
- 使用起来感觉如何？

从产品设计到用户体验设计：兼顾**视觉和功能**两方面的因素，同时解决产品所面临的其他问题。

任何在用户体验上所做的努力，目的都是为了提高效率。这基本上是以两种主要形式体现出来的：“帮助人们工作得更快”和“减少他们犯错的几率”。

## 用户体验的五个层面

![png]({{"/assets/images/2022/20220210_01.jpg"| absolute_url }})

不需要严格线性开展工作，最佳实践是让每一个层面的工作在下一个层面可以结束之前完成:

![png]({{"/assets/images/2022/20220210_02.jpg"| absolute_url }})

### 战略层(strategy)

- 产品目标：我们要通过这个产品得到什么？
  - 产品目标：商业目标、品牌识别、成功标准（一些可追踪的指标）
- 用户需求：我们的用户要通过这个产品得到什么？
  - 用户是谁，用户的需求是什么？
  - 可用性和用户研究：问卷、原型测试、焦点小组等
  - 创建人物角色：抽象典型用户形象

用户细分：将全部的用户划分成较小的、有共同需求的小组，以此来帮助我们更好地了解用户的需求。

![png]({{"/assets/images/2022/20220210_03.jpg"| absolute_url }})

### 范围层（scope）

- 过程（process）

当整个事情还处在假设阶段的时候，它能迫使你去考虑潜在的冲突和产品中一些粗略的点。我们能确定现在能解决哪些事情，而哪些必须要再迟一点才能解决。

- 产品（product）

被定义的这个产品给了整个团队一个参考点，明确了这个项目中要完成的的全部工作，它也提供了一门用于讨论这件事情的共同的语言。定义好你的要求能保证在设计过程中不会出现模棱两可的情况。

定义项目范围同时在做这两件事：**这是一个有价值的过程，同时能产生有价值的产品**。

- 我们要开发的是什么？
  - 定义需求
  - 编写规格说明
  - 定义需求优先级：评估这些需求是否能满足我们的战略目标？实现这些需求的可行性有多大？

有时一个需求可以满足多个战略目标。同样，一个战略目标也常常关系到多个不同的需求。

![png]({{"/assets/images/2022/20220210_04.jpg"| absolute_url }})

### 结构层（structure）

战略告诉我们“用户的需求是什么”，范围则告诉我们“什么样的信息将满足那些用户需求”。在创建结构时，我们就要具体地识别出用户心目中至关重要的那些信息。成功的用户体验，就是能事先预知用户的期望并将其纳入设计之中。

在传统的软件开发行业，涉及“为用户设计结构化体验”的方法被称为**交互设计（interaction design）**。在内容建设方面，主要是通过**信息架构（information architecture）**来构建用户体验。

交互设计和信息架构都强调一个重点：确定各个将要呈现给用户的元素的“模式（patterns）”和“顺序（sequences）”。交互设计关注于将影响用户执行和完成任务的元素。信息架构则关注如何将信息表达给用户的元素。

概念模型：用户对于“交互组件将怎样工作”的观点称为概念模型（conceptual model）。一个概念模型可以反映系统的一个组件或是整个系统。

信息架构关注的是呈现给用户的信息是否合理并具有意义。在以内容为主的网站上，信息架构主要的工作是设计组织分类和导航的结构，让用户可以高效率、有效地浏览网站的内容。

- 从上到下的架构方法是由战略层驱动的

![png]({{"/assets/images/2022/20220210_06.jpg"| absolute_url }})

- 从下到上的架构方法是由范围层驱动的

![png]({{"/assets/images/2022/20220210_07.jpg"| absolute_url }})

从上到下的架构方法有时可能导致内容的重要细节被忽略。另一方面，从下到上的方法则可能导致架构过于精确地反映了现有的内容，因此不能灵活地容纳未来内容的变动或增加。因此在从上到下和从下到上的方法之间找到平衡是唯一可避免两者缺点的方法。

一个适应性强的信息架构系统，能把新内容作为现有结构的一部分容纳进来（上图），也可以把新内容当成一个完整的新部分加入（下图）。

![png]({{"/assets/images/2022/20220210_08.jpg"| absolute_url }})

信息架构的基本单位是节点（node）。节点可以对应任意的信息片段或组合—它可以小到是一个数字（比如产品的价格），或都大到是整个图书馆。我们要处理的是节点，而不是页面、文档或组件，这个思路有助于我们使用一种共同的语言和一组共同的结构的概念来对付各种不同的问题。

- 层级结构（hierarchical structure）

![png]({{"/assets/images/2022/20220210_09.jpg"| absolute_url }})

- 矩阵结构（matrix structure）

![png]({{"/assets/images/2022/20220210_10.jpg"| absolute_url }})

- 自然结构（organic structures）

![png]({{"/assets/images/2022/20220210_11.jpg"| absolute_url }})

- 线性结构（sequential structures）

![png]({{"/assets/images/2022/20220210_12.jpg"| absolute_url }})

错误处理：

- 将系统设计成不可能犯错的那种
- 使错误难以发生
- 处理每一个错误，以确保更高比例的用户能有积极的体验：预防、改正和恢复

![png]({{"/assets/images/2022/20220210_05.jpg"| absolute_url }})

### 框架层（skeleton）

结构层是这个项目的一个宏伟远景，界定了我们的产品将用什么方式来运作。框架层则用于确定用什么样的功能和形式来实现。除了解决具体的这些议题，框架层还要处理更精确的细节问题。在结构层，我们看到一个较大的架构和交互的设计；在框架层，我们的关注点几乎全部在独立的组件以及它们之间的相互关系上。

在框架层，线框图是是展示宏伟远景如何完成的详细文档。线框图有时也需要导航规格的支持，以便能更详细、准确地描述各种导航元素的每一个组成成分。

![png]({{"/assets/images/2022/20220210_13.jpg"| absolute_url }})

线框图就可以确定一个建立在基本概念结构上的架构，同时指出了表现层的设计应该前进的方向。

- 通过安排和选择界面元素来整合界面设计
- 通过识别和定义核心导航系统来整合导航设计
- 通过放置和排列信息组成部分的优先级来整合信息设计

#### 信息设计

用一种能“反映用户的思路”和“支持他们的任务和目标”的方式来分类和排列这些信息元素。

#### 导航设计

- 必须提供给用户一种在网站间跳转的方法
- 必须传达出这些元素和它们所包含内容之间的关系
- 必须传达出它的内容和用户当前浏览页面之间的关系

常见导航系统：

- 全局导航（global navigation）
- 局部导航（local navigation）
- 辅助导航（supplementary navigation）
- 上下文导航（contextual navigation，有时也叫“内联导航”）
- 友好导航（courtesy navigation）
- 远程导航（remote navigation）
  - 网站地图（site map）
  - 索引表（index）

#### 界面设计

哪个功能要在哪个界面上完成，是我们在结构层的交互设计中已经决定的。而这些功能在界面上如何被用户认知到，则属于界面设计的范畴。

成功的界面设计是那些能让用户一眼就看到“最重要的东西”的界面设计。例如：选择恰当的默认值，让更多的用户感到满意。

### 表现层（surface）

在框架层，我们主要解决放置的事情。界面设计考虑可交互元素的布局，导航设计考虑在产品中引导用户移动的元素的安排，而信息设计考虑传达给用户的信息要素的排布。在表现层，我们要解决并弥补“产品框架层的逻辑排布”的感知呈现问题。

- 合理设计感知：视觉、听觉、触觉、嗅觉和味觉
  - 对比和一致性
  - 内部和外部一致性
  - 配色方案和排版一致性

视觉模型（visual mock-up）或设计合成品（design comp）：

![png]({{"/assets/images/2022/20220210_14.jpg"| absolute_url }})


参考
============

版权声明：本文为博主原创文章，转载请注明出处。 [旭日酒馆](https://xueyp.github.io/)

---
layout: post
title:  "读书笔记-产品思维：创新设计的六条法则"
categories: 读书笔记
tags: 读书笔记
author: xueyp
description:
---
## 简介

设计思维给我的正是一种新的处理问题的方式，和传统的循规蹈矩的定义问题，在现有的方法中选择最恰当的方法相比，设计思维是去探索新的可能性、新的解决方案、前所未有的新想法。

### 创意的价值

在一个产业中，位于阶梯高处的企业越多，那么这个产业所具有的设计附加值就越高，也就意味着产业具备更高的附加值和创新驱动力。

设计阶梯（Design Ladder）：

- 第一层：设计缺失

产品开发中不注重设计环节，设计任务被委托给非设计专业的人。评估设计的标准仅围绕着功能和审美，用户的需求和观念在整个过程中几乎没有任何作用。

- 第二层：设计作为造型

设计作为形式赋予设计被视为最终的形式赋予阶段，无论是与产品开发还是平面设计相关。许多设计师对此过程使用术语“样式设计（Styling Design）”，有时候会由专业设计师执行，通常是由具有其他专业背景的人员完成。

- 第三层：设计作为流程

设计作为一种工作方法，作为项目早期的工作内容。解决方案由问题和终端用户的需求驱动，需要各种技能和能力的参与，例如过程技术人员、材料技术人员、营销专家和行政人员。将设计视为一个具有复杂性、多学科交叉背景的流程。

- 第四层：设计作为战略

设计师与公司的所有者及管理层合作，全面或部分地重新思考企业业务。成为解决商业问题的创新手段，融合公司愿景和使命，让客户在产品、服务、战略等多个方面受益。

## 问题+方法

设计不仅是让产品看起来怎么样，更应是使用起来怎么样。

我们可以把产品看作多个“问题+方法”组合的集合体。因为绝大多数的产品之所以能够存在，绝对不是因为它仅能解决某一个问题，而一组“问题+方法”的组合，于使用者而言，就是这件产品所具备的功能。

- 对的问题：依靠的是设计师优秀的洞察力和对事物理解的独特角度，也就是创造性思维
  - 尽可能地洞察顶层需求
  - 从以产品为中心的设计思维到**以人为中心的交互设计**：工业革命时期的功能产品设计->电气革命时期的系统级产品设计
- 好的方法：基于设计师缜密、严谨的分析方法，并结合大量的实践后得出的，是逻辑性思维
  - 正向设计：通过甄选和组合，确定一个“旧问题+新方法”的组合，从而产生新的产品设计方案
  - 逆向设计，直接寻找不同场景下的同一问题。然后再基于这一新场景组合后（问题+场景+方法）带来的各种可能，得到新的产品创意

创造性思维与逻辑性思维的组合就是设计思维。

- 正向设计：基于问题找方法

![png]({{"/assets/images/2022/20220304_01.jpg"| absolute_url }})

- 逆向设计：基于方法找问题

![png]({{"/assets/images/2022/20220304_02.jpg"| absolute_url }})

## 1+1>2

通过恰当的功能组合方式，赋予产品更高的价值。

- 场景并用，组合功能
  - 通过并用场景找到可组合的功能，从而得到产品创意
  - 通过场景的合并，在同一应用场景下出现的多个功能
  - 避免过度设计（Over Design)：避免冗余的功能，导致产品本身易用性的降低
- 串联场景，重构产品
  - 选择主体产品。一定要让一件产品为另一件产品做配角，辅助主角为用户提供更好的使用体验
  - 注意场景的时序性：寻找几个场景之间相关联的部分进行场景组合来得到过渡场景
- 产品组合
  - 用户参与式产品功能组合
    - 模块化设计：从场景的筛选，到场景中对功能需求的罗列，再根据功能对场景的适配情况及数量，决定哪些功能需要设计进入主体产品，哪些功能需要独立存在成为模块。最后，为了让设计更具价值，设计师还要对模块的组合方式进行再创造，尽可能寻找模块扩展下核心产品所适应的场景数量。
    - 模块化设计的优势非常显著，但是过度的模块化或模块化程度不足的设计，却有可能产生负面影响。
  - 产品的自我组合：乐高
    - 原子级的拆分要足够标准化、通用化
    - 制造场景引导消费者学习、创造

场景组合：

![png]({{"/assets/images/2022/20220304_03.jpg"| absolute_url }})

## 产品A特征⇋产品B特征

- 使用形式替换
  - 生活中的所有已有产品都可以提炼出某些部分，应用于其他产品上，从而实现对用户使用的影响，并改善产品的使用体验
- 功能主体替换
  - 从空间和时间两个维度同时扩展功能主体，去寻找与产品相关的所有可能的功能载体，以帮助我们更好地划定产品的自身边界，并对产品进行优化
  - 功能主体的替换更多是用来提高产品的可用性和易用性
- 产品形态替换
  - 一个良好的可以用来进行替换的形态至少需要具备识别性、可塑性、独立性三个特性
  - 采用相似联想、正负形的方法，进行形态替换后产生创意
- 服务系统替换
  - 梳理服务流程为旅程图，发现旅程中所有体验不良的地方
  - 针对每个服务断点进行优化设计

## 产品∩特定场景

- 接受约束
  - 重视“路径依赖”原则：用户学习成本的约束、设备通用性的约束等
  - 主动寻找约束条件，并将其用作对产品的限定
- 利用特定场景，洞察产品机会
  - 重视理想使用场景和真实产品使用场景的差别
  - 寻找特定的场景，对产品预想的场景进行扩展
- 限定场景要素，寻求特定场景
  - 一个怎样的人在怎样的环境，由怎样的技术、功能或产品，完成了一个怎样的活动
  - 通过对人、环境、活动、功能四个场景要素的限定，去寻求能够促进循环，并且优化场景中各要素之间相互关系的需求或机会
  - 人：生理特征、特殊需求、认知特征、心智模型、文化背景
  - 活动：目标、内容和行动，频次及持续时间，显示交互任务与隐式交互任务，独立任务与并行任务，连续或中断的活动，应对错误
  - 环境：物理环境、社会环境、组织环境、瞬时环境、上下文环境
  - 功能：物理属性、信息属性、获取方式、互动形式、功能载体

使用场景的差别：

![png]({{"/assets/images/2022/20220304_04.jpg"| absolute_url }})

场景要素中的用户需求与产品机会的关系：

![png]({{"/assets/images/2022/20220304_05.jpg"| absolute_url }})

## 扩展产品功能

- 有计划的商品废止
  - 功能型废止：以新功能吸引人购买新产品
  - 感知型废止：新款式、流行色
  - 质量型废止：控制产品使用寿命
  - 管控废止：设定有效期
  - 系统式废止：通过操作系统使产品变得难用
- 产品生命周期延长
  - 通过产品维修、耐用性提升、备份易损部件等多种方式，通过延长产品生命周期来减少浪费
  - 通过为产品进行功能添加、升级等方式，让产品在其生命周期末端，产生一个翘尾，从而以另一种方式使产品生命周期得到延长，从而创造出新的商业利益
- 产品扩展的思考方向
  - 废弃物的再利用
  - 巧妙借用周边物品
  - 现有产品功能升级

产品生命周期的翘尾：

![png]({{"/assets/images/2022/20220304_06.jpg"| absolute_url }})

## 感官体验←语意→主观感受

通过恰当的设计语言，连通用户的感官与感受，以传达优秀体验为首要目标，进行创意设计。

- 创造情感化体验
  - 不能单纯聚焦在独立的感官层面，而是需要通过多种感官的融合，营造出一个完整的感受传达给用户，从而达到体验上的提升
  - 连通感官与感受
  - 有目的性地利用设计语言进行表达，从而保证信息的有效传递
  - 视觉符号
  - 行为参与
  - 混合感官：五感

行为参与的创意方法：

![png]({{"/assets/images/2022/20220304_07.jpg"| absolute_url }})

## 创意

### 如何激发创意？

- 由被动式思维逻辑到主动式思维逻辑
- 由纵向思维到横向思维
- 由按部就班变成跳跃式
- 由追求每一步的正确变成追求整体正确
- 拆除语意的围墙
- 由建构信息变成重构信息

### 如何制定创意纲要？

- 产品概述
  - 愿景：整个创意纲要的概括，并同时确保你的想法与项目的决策者或产品的终端用户相一致，避免设计师的一厢情愿
  - 交付物：根据项目的周期、预算、团队成员构成等方面进行选择，可以是草图、草模型、功能样机、产品原型、小批量试制、量产原型等
- 创意目标
  - 描述你希望通过创意解决的问题，并把它以简要的、可以理解的方式进行陈述
- 关键用户
  - 在这个设计项目中需要主要考虑的角色，他可能是产品的消费者，可能是最终的使用者，也可能是销售者
- 关键功能
- 渠道
- 终端场景
  - 这件产品会在什么环境及语境下出现
- 设计语言
  - 奠定一个设计师的个人风格或一个企业的产品风格
- 产品策略
  - 一件好的产品，都应该具备战略性
- 竞品分析


### 启发式可用性评估原则

1. 系统状态可见（Visibility of system status）

系统应始终在合理的时间内通过适当的反馈向用户通知正在发生的事情。

2. 虚拟系统与现实世界相匹配（Match between system and the real world）

系统应该使用用户熟悉的单词，短语和概念，而不是面向系统的术语。遵循现实世界的惯例，将信息更自然和富有逻辑地呈现。

3. 用户可自由掌控（User control and freedom）

用户经常错误地选择系统功能，需要一个明确标记的“紧急出口”以离开不需要的状态，而不必经过更多的系统会话，系统应支持撤销和重做。

4. 一致性与标准化（Consistency and standards）

不应该让用户思考不同的单词、情境或行为是否意味着相同的事情，而应提供一套用户可遵循的系统平台中的惯例。

5. 错误预防（Error prevention）

比准确的错误消息更有效的是精心的设计，可以防止问题发生。要么消除容易出错的情况，要么系统自动检查信息，并在用户提交操作之前向用户显示确认选项。

6. 识别而非记忆（Recognition rather than recall）

通过使对象、操作和选项可见，最大限度地减少用户的认知负载，这样用户就不必记住从对话的某个位置到另一个位置的信息。在适当的时候，系统的使用说明应该是可见的或易于检索的。

7. 灵活性与效率（Flexibility and effciency of use）

系统可以满足新手用户，也可以满足熟练用户和高级用户的定制化需求。允许用户自定义某些高频操作，提高用户交互效率。

8. 美观而简约（Aesthetic and minimalist design）

会话中不应包含不相关或很少需要的信息，在段落中每增加一个单位的重要信息，就意味着降低了其他信息的可见性。

9. 帮助用户识别、诊断和修复错误（Help users recognize,diagnose and recover from errors）

错误消息应以简明语言（而非代码）表示，准确指出问题，并建设性地位用户提供解决方案。

10. 帮助文档和使用手册（Help and documentation）

即使系统可以在没有文档的情况下运行良好，但你可能仍需要提供帮助文档和使用手册。任何此类信息都应易于搜索，关注用户的任务，列出要执行的具体步骤，避免过于冗长。




参考
============

版权声明：本文为博主原创文章，转载请注明出处。 [旭日酒馆](https://xueyp.github.io/)
